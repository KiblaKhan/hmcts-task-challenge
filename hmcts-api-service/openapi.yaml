# yaml-language-server: $schema=https://spec.openapis.org/oas/3.1/schema/2022-10-07
openapi: 3.1.0
info:
  title: HMCTS API Service
  version: 1.0.0

servers:
  - url: https://api.example.com
    description: Prod
  - url: https://staging.api.example.com
    description: Staging
  - url: http://localhost:8080
    description: Local

# Quickstart build: no auth enforced (keep scheme in components for future use)
security: []

paths:
  /tasks:
    post:
      operationId: createTask
      summary: Create task
      parameters:
        - $ref: "#/components/parameters/IdempotencyKey"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskCreate"
      responses:
        "201":
          description: Created
          headers:
            Location:
              $ref: "#/components/headers/Location"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        "400": { $ref: "#/components/responses/BadRequest" }
        "409": { $ref: "#/components/responses/Conflict" }
        "422": { $ref: "#/components/responses/UnprocessableEntity" }
        "500": { $ref: "#/components/responses/InternalServerError" }

    get:
      operationId: listTasks
      summary: List tasks
      parameters:
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/PageSize"
        - $ref: "#/components/parameters/Sort"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Task"
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /tasks/{id}:
    get:
      operationId: getTask
      summary: Get task
      parameters:
        - $ref: "#/components/parameters/TaskId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }

    delete:
      operationId: deleteTask
      summary: Delete task
      parameters:
        - $ref: "#/components/parameters/TaskId"
      responses:
        "204":
          description: No Content
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /tasks/{id}/status:
    put:
      operationId: updateTaskStatus
      summary: Update task status
      parameters:
        - $ref: "#/components/parameters/TaskId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskStatusUpdate"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        "400": { $ref: "#/components/responses/BadRequest" }
        "404": { $ref: "#/components/responses/NotFound" }
        "409": { $ref: "#/components/responses/Conflict" }
        "422": { $ref: "#/components/responses/UnprocessableEntity" }
        "500": { $ref: "#/components/responses/InternalServerError" }

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    TaskId:
      name: id
      in: path
      required: true
      schema: { type: string }
      description: Task identifier
    IdempotencyKey:
      name: Idempotency-Key
      in: header
      required: false
      description: Best-effort duplicate detection in this challenge build (409 on key reuse). Response replay is not implemented yet.
      schema: { type: string }
    Page:
      name: page
      in: query
      description: 1-based page index
      schema:
        type: integer
        minimum: 1
        default: 1
    PageSize:
      name: page_size
      in: query
      description: Items per page
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
    Sort:
      name: sort
      in: query
      description: Sort key
      schema:
        type: string
        enum: [dueDate, status]
        default: dueDate

  headers:
    Location:
      description: Absolute URL of the newly created resource.
      schema: { type: string, format: uri }
    # Future use; not emitted by the quickstart build
    Link:
      description: >
        Pagination links as per RFC 5988, e.g.
        `<https://api.example.com/tasks?page=3&page_size=20>; rel="next"`.
      schema: { type: string }
    RateLimit-Limit:
      description: The request quota for the window.
      schema: { type: integer, minimum: 0 }
    RateLimit-Remaining:
      description: Requests remaining in the current window.
      schema: { type: integer, minimum: 0 }
    RateLimit-Reset:
      description: Seconds until the current window resets.
      schema: { type: integer, minimum: 0 }

  responses:
    BadRequest:
      description: Bad Request
      content:
        application/problem+json:
          schema: { $ref: "#/components/schemas/Problem" }
    NotFound:
      description: Resource not found
      content:
        application/problem+json:
          schema: { $ref: "#/components/schemas/Problem" }
    Conflict:
      description: Conflict
      content:
        application/problem+json:
          schema: { $ref: "#/components/schemas/Problem" }
    UnprocessableEntity:
      description: Validation failed
      content:
        application/problem+json:
          schema: { $ref: "#/components/schemas/Problem" }
    InternalServerError:
      description: Internal Server Error
      content:
        application/problem+json:
          schema: { $ref: "#/components/schemas/Problem" }

  schemas:
    TaskStatus:
      type: string
      enum: [OPEN, IN_PROGRESS, DONE]

    Task:
      type: object
      required: [id, title, status]
      properties:
        id: { type: string }
        title: { type: string }
        description: { type: string }
        status: { $ref: "#/components/schemas/TaskStatus" }
        dueAt: { type: string, format: date-time }

    TaskCreate:
      type: object
      required: [title]
      properties:
        title: { type: string, minLength: 1 }
        description: { type: string }
        dueAt: { type: string, format: date-time }

    TaskStatusUpdate:
      type: object
      required: [status]
      properties:
        status: { $ref: "#/components/schemas/TaskStatus" }

    # Kept for future pagination work (not referenced by quickstart endpoints)
    TaskListResponse:
      type: object
      description: A paginated list of tasks.
      properties:
        data:
          type: array
          items: { $ref: "#/components/schemas/Task" }
        meta:
          type: object
          properties:
            page: { type: integer, minimum: 1 }
            page_size: { type: integer, minimum: 1 }
            total_items: { type: integer, minimum: 0 }
            total_pages: { type: integer, minimum: 0 }
          required: [page, page_size, total_items, total_pages]
        links:
          type: object
          properties:
            self: { type: string, format: uri }
            first: { type: string, format: uri }
            prev: { type: string, format: uri }
            next: { type: string, format: uri }
            last: { type: string, format: uri }
      required: [data, meta]

    Problem:
      type: object
      description: RFC 7807 Problem Details
      properties:
        type: { type: string, format: uri-reference, default: about:blank }
        title: { type: string }
        status: { type: integer, minimum: 100, maximum: 599 }
        detail: { type: string }
        instance: { type: string, format: uri-reference }
        errors:
          description: Optional list of field-level validation errors.
          type: array
          items:
            type: object
            properties:
              field: { type: string }
              message: { type: string }
      required: [title, status]
      additionalProperties: true
